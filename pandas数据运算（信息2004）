from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"
import pandas as pd
d =pd.DataFrame([[56,78,90],[23,45,67],[None,78,34],[67,78,90],[67,78,90]],
               index=["张三","李四","王五","王二","王六"],
               columns=["语文","数学","英语"])
d
#运算
d.sum() #默认按列求和  axsi=0
d.sum(axis=1) #默认按行求和
d.mean() # 默认案列求平均值 axis=0
d.mean(axis=1) #axis=1 按行求平均值
d.count()#count 统计非NAN的个数
d.head(2)
d.describe()
#max 求最大值  min求最小值
#head(n)取前n行，若不设置n则默认值前5行
#tail 取最后n行，若不设置则默认最后5行
-------------------------------------------------------------
d =pd.DataFrame([[56,78,90],[23,45,67],[None,78,34],[67,78,90],[67,78,90]],
               index=["张三","李四","王五","王二","王六"],
               columns=["语文","数学","英语"])
d
#.drop(d.index[[0,0]])
d.drop(["语文"],axis=1) #根据指定行索引删除某一行
#等价于
d.drop(columns="语文")

d.drop(["张三"],axis=0) #根据指定列索引删除某一行
#等价于
d.drop(index="张三")

d.isnull() #查看是否包含空值，是则返回true,否则返回False
d.dropna(axis=1) #去掉带空值的列 axis=1
d.duplicated() #判断是否有重复值，是则返回true,否则返回false
d.drop_duplicates() #默认删除第二个重复的值
--------------------------------------------------------------------

#join() 用于横向拼接
d1 =pd.DataFrame([[56,78,90],[23,45,67],[None,78,34],[67,78,90],[67,78,90]],
               index=["张三","李四","王五","王二","王六"],
               columns=["语文","数学","英语"])
d2 =pd.DataFrame([[56,78,90],[23,45,67],[None,78,34]],
               index=["张三","李四","王五"],
               columns=["物理","化学","生物"])
#若果索引一致，直接横向拼接，如果索引不一致，索引只输出在join前面
d1.join(d2)
d2.join(d1)
--------------------------------------------------------------------
1.import pandas as pd
#导入数据集，将将数据集命名为euro12
euro12 = pd.read_csv("Euro2012_stats.csv")
euro12

2.#该数据集中一共有多少列(columns)?
len(euro12.columns)

3.#输出进球数（Goals）这一列
euro12["Goals"]

4.#有多少球队参与了2012欧洲杯？
euro12["Team"].count()

5.#将数据集中的列Team, Yellow Cards和Red Cards单独存为一个名叫discipline的数据框


6.#行筛选：找到进球数Goals超过6的球队数据
euro12[euro12['Goals']>6]

7.#列筛选：选取前7列 
euro12.iloc[:,0:7]

8.#列筛选：选取除了最后3列之外的全部列
euro12.iloc[:-3]

----------------------------------------------------
#merge() 基于指定列的横向拼接
x = pd.DataFrame({"姓名":["张三","李四","王五"],"班级":["一班","二班","三班"]})
y = pd.DataFrame({"专业":["统计学","计算机","会计"],"班级":["一班","三班","四班"]})
x
y

pd.merge(x,y,how="left") #左连接
pd.merge(x,y,how="right") #右连接
pd.merge(x,y,how="inner") #内连接 交集
pd.merge(x,y,how="outer") #外连接 并集
--------------------------------------------------------------------
#concat 函数可以横向也可以纵向
d1 =pd.DataFrame([[56,78,90],[23,45,67],[None,78,34],[67,78,90],[67,78,90]],
               index=["张三","李四","王五","王二","王六"],
               columns=["语文","数学","英语"])
d2 =pd.DataFrame([[56,78,90],[23,45,67],[None,78,34]],
               index=["张三","李四","王七"],
               columns=["物理","化学","生物"])
d1
d2
pd.concat([d1,d2]) #默认纵向合并 ,axis=0
pd.concat([d1,d2],axis=1)
-------------------------------------------------------------------------

学习通作业：：
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"  #显示全结果
import pandas as pd
# 导入数据集，将将数据集命名为euro12
euro12 = pd.read_csv("Euro2012_stats.csv")
euro12
# 该数据集中一共有多少列(columns)?
euro12.shape[1]
# 输出进球数（Goals）这一列
euro12.Goals
# 有多少球队参与了2012欧洲杯？
euro12.shape[0]
# 将数据集中的列Team, Yellow Cards和Red Cards单独存为一个名叫discipline的数据框
discipline = euro12[['Team','Yellow Cards','Red Cards']]
discipline
# 行筛选：找到进球数Goals超过6的球队数据
euro12[euro12.Goals > 6]
# 列筛选：选取前7列
euro12.iloc[:,0:7]
# 列筛选：选取除了最后3列之外的全部列
euro12.iloc[:,:-3]
